// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: tasks.sql

package database

import (
	"context"
	"time"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (task, task_time, chat_id, created_at)
VALUES ($1, $2, $3, $4)
RETURNING id, task, task_time, chat_id, status, created_at
`

type CreateTaskParams struct {
	Task      string
	TaskTime  string
	ChatID    int64
	CreatedAt time.Time
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.Task,
		arg.TaskTime,
		arg.ChatID,
		arg.CreatedAt,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Task,
		&i.TaskTime,
		&i.ChatID,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getAllTasks = `-- name: GetAllTasks :many
SELECT task, task_time, created_at
FROM tasks
WHERE chat_id = $1 AND status = 'in_progress'
`

type GetAllTasksRow struct {
	Task      string
	TaskTime  string
	CreatedAt time.Time
}

func (q *Queries) GetAllTasks(ctx context.Context, chatID int64) ([]GetAllTasksRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllTasks, chatID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllTasksRow
	for rows.Next() {
		var i GetAllTasksRow
		if err := rows.Scan(&i.Task, &i.TaskTime, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTaskId = `-- name: GetTaskId :many
SELECT id, task_time, created_at
FROM tasks
WHERE task = $1 AND chat_id = $2
`

type GetTaskIdParams struct {
	Task   string
	ChatID int64
}

type GetTaskIdRow struct {
	ID        int64
	TaskTime  string
	CreatedAt time.Time
}

func (q *Queries) GetTaskId(ctx context.Context, arg GetTaskIdParams) ([]GetTaskIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getTaskId, arg.Task, arg.ChatID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTaskIdRow
	for rows.Next() {
		var i GetTaskIdRow
		if err := rows.Scan(&i.ID, &i.TaskTime, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTaskStatus = `-- name: UpdateTaskStatus :exec
UPDATE tasks
SET status = 'done'
WHERE id = $1
`

func (q *Queries) UpdateTaskStatus(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, updateTaskStatus, id)
	return err
}
