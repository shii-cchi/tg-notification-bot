// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: tasks.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (task, task_time, chat_id, created_at)
VALUES ($1, $2, $3, $4)
RETURNING id, task, task_time, chat_id, status, created_at, deleted_at
`

type CreateTaskParams struct {
	Task      string
	TaskTime  string
	ChatID    int64
	CreatedAt time.Time
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.Task,
		arg.TaskTime,
		arg.ChatID,
		arg.CreatedAt,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Task,
		&i.TaskTime,
		&i.ChatID,
		&i.Status,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
UPDATE tasks
SET status = 'deleted', deleted_at = $2
WHERE id = $1
`

type DeleteTaskParams struct {
	ID        int64
	DeletedAt sql.NullTime
}

func (q *Queries) DeleteTask(ctx context.Context, arg DeleteTaskParams) error {
	_, err := q.db.ExecContext(ctx, deleteTask, arg.ID, arg.DeletedAt)
	return err
}

const getAllTasks = `-- name: GetAllTasks :many
SELECT id, task, task_time, created_at
FROM tasks
WHERE chat_id = $1 AND status = 'in_progress'
`

type GetAllTasksRow struct {
	ID        int64
	Task      string
	TaskTime  string
	CreatedAt time.Time
}

func (q *Queries) GetAllTasks(ctx context.Context, chatID int64) ([]GetAllTasksRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllTasks, chatID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllTasksRow
	for rows.Next() {
		var i GetAllTasksRow
		if err := rows.Scan(
			&i.ID,
			&i.Task,
			&i.TaskTime,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isDeletedTask = `-- name: IsDeletedTask :one
SELECT
    CASE
        WHEN status = 'deleted' THEN TRUE
        ELSE FALSE
    END AS is_deleted
FROM tasks
WHERE id = $1
`

func (q *Queries) IsDeletedTask(ctx context.Context, id int64) (bool, error) {
	row := q.db.QueryRowContext(ctx, isDeletedTask, id)
	var is_deleted bool
	err := row.Scan(&is_deleted)
	return is_deleted, err
}

const updateTaskStatus = `-- name: UpdateTaskStatus :exec
UPDATE tasks
SET status = 'completed'
WHERE id = $1
`

func (q *Queries) UpdateTaskStatus(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, updateTaskStatus, id)
	return err
}
